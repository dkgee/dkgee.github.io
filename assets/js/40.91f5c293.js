(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{485:function(e,t,o){"use strict";o.r(t);var n=o(36),c=Object(n.a)({},(function(){var e=this._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"基于docker的shell脚本文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于docker的shell脚本文件"}},[this._v("#")]),this._v(" 基于Docker的Shell脚本文件")]),this._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[this._v("启动App")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[this._v('#!/bin/bash\n\n# 描述:ciot部署脚本\n#\n# 注意：脚本中的主机地址需要替换为服务器的网络地址   vi中替换方式 ":1,$ s/$ip/172.30.154.246/g"\t\t\n#\n\n# echo "=====================【Caution: please ensure the IP in script has been replace your current host network IP】================="\n# echo "=====================【Caution: vi edit sample:1,$ s/$ip/172.30.154.246/g 】==================================================="\n\necho -n "please enter current server IP:"\nread ip\necho "syntx: CIOT wile auto deploy on server[$ip]."\n\n# 基本目录配置，根据需要修改，例如/opt修改为/mnt\nbaseDir=/opt/docker/docker-ciot\n# 清理容器\nclean=yes\n\n# step01: 检查系统是否安装docker命令，并清理已完成的镜像\necho "step01:============Clean Docker ======================="\nif ! [ -x "$(command -v docker)" ]; then\n  echo \'Error: docker is not installed.\' >&2\n  cd $baseDir\n  tar -zxvf docker-ciot.tar.gz\n  rpm -ivh docker/* --nodeps --force\n  systemctl daemon-reload\n  systemctl enable docker\n  systemctl start docker\nelse\n  echo \'warn: find docker command\'  \n  if [ $clean == "yes" ];then\n\techo \'syntx: clean docker.\'  \n\tdocker stop $(docker ps -a -q)\n\tdocker rm $(docker ps -a -q)\n\tdocker rmi $(docker images -q)\n  fi\nfi\necho "========================================================"\n\n# step02: 导入mysql镜像\necho "step02:============Import mysql========================"\ncd $baseDir\ntar -zxvf mysql.tar.gz && cd mysql\ndocker load --input ./mymysql-5.7.tar\nrm -rf ./mymysql-5.7.tar\ndocker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/var/log/mysql -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --network host -d mymysql:5.7\necho "========================================================"\n\n# step03: 导入clickhouse镜像\necho "step03:============Import clickhouse===================="\ncd $baseDir\ntar -zxvf clickhouse.tar.gz && cd clickhouse\ndocker load --input ./mych-1.0.0.tar\nrm -rf ./mych-1.0.0.tar\ndocker run -d --name mych --ulimit nofile=262144:262144 -p 8123:8123 --volume=$PWD/database:/var/lib/clickhouse --network host mych:1.0.0\necho "========================================================"\n\n# step04：导入redis集群镜像\necho "step04:============Import redis========================="\ncd $baseDir\ntar -zxvf rediscluster.tar.gz && cd rediscluster\ndocker load --input ./rediscluster-latest.tar\nrm -rf ./rediscluster-latest.tar\ndocker run --name myredisc -v $PWD/data:/data -p 7000:7000 -p 7001:7001 -p 7002:7002 -p 7003:7003 -p 7004:7004 -p 7005:7005 -d --network host tommy351/redis-cluster\necho "========================================================"\n\n# step05：导入zookeeper镜像\necho "step05:============Import zookeeper====================="\ncd $baseDir\ndocker load --input ./myzk-1.0.0.tar\ndocker run -d --name myzk -p 2181:2181 --network host myzk:1.0.0\necho "========================================================"\n\n# step06：导入kafka镜像\necho "step06:============Import kafka    ====================="\ndocker load --input ./mykafka-1.0.0.tar\ndocker run -d --name mykafka -p 9092:9092 --env KAFKA_ZOOKEEPER_CONNECT=$ip:2181 --env KAFKA_ADVERTISED_HOST_NAME=$ip \\\n--env KAFKA_ADVERTISED_PORT=9092 --env KAFKA_DELETE_TOPIC_ENABLE=true --env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://$ip:9092 \\\n--volume /etc/localtime:/etc/localtime --network host mykafka:1.0.0\n\necho "syntx:the following will occure some warns, such as \'kafka.admin.TopicCommand\',that is create topic, please ignore it."\ndocker exec -it mykafka /opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper $ip:2181 --replication-factor 1 --partitions 1 --topic TopicDeviceLog\ndocker exec -it mykafka /opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper $ip:2181 --replication-factor 1 --partitions 1 --topic TopicIpAccessLog\necho "========================================================"\n\n# step07：配置logstash\necho "step07:============Import Logstash ====================="\ncd $baseDir\ntar -zxvf logstash.tar.gz && cd logstash\nsed -i "s/localhost/$ip/g" `grep localhost -rl ./config/kafka-to-ck-devicelog_v1.2.conf`\ndocker load --input ./mylogstash-1.0.0.tar\nrm -rf ./mylogstash-1.0.0.tar\ndocker run -d -p 9600:9600 -it -v $PWD/config/:/usr/share/logstash/config/  --network host mylogstash:1.0.0\necho "========================================================"\n\n# step08：导入cms项目中的admin、executor、web镜像\necho "step08:============Import ciot ========================="\ncd $baseDir\ndocker load --input ./ciot-admin-1.0.0.tar\ndocker load --input ./ciot-exe-1.0.0.tar\ndocker load --input ./ciot-web-1.0.0.tar\ndocker run --name ciot-admin -p 8081:8081 --network host -d ciot-admin:1.0.0\ndocker run --name ciot-exe -p 9999:9999 --network host -d ciot-exe:1.0.0\ndocker run --name ciot-web -p 8083:8083 --network host -d ciot-web:1.0.0\necho "========================================================"\n\necho "ciot system has deployed, please check in browser:"\necho ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>ciot-admin: http://$ip:8081/"\necho ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>ciot-web: http://$ip:8083/"\t\n')])])])])])}),[],!1,null,null,null);t.default=c.exports}}]);