(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{657:function(e,t,n){"use strict";n.r(t);var s=n(36),a=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"docker笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker笔记"}},[e._v("#")]),e._v(" Docker笔记")]),e._v(" "),t("h3",{attrs:{id:"docker安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[e._v("#")]),e._v(" Docker安装")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/bbwangj/article/details/81088231",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alpine系统"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("脚本安装Docker： curl https://get.docker.com | bash")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/h363659487/article/details/77159306",target:"_blank",rel:"noopener noreferrer"}},[e._v("CentOS 环境Docker离线安装方式"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker文件下载地址"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.widuu.com/docker/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 中文指南"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/U7vpxi28kTZPtlIpCQ5_gQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("两款Docker可视化工具"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/hHuL_nBkH-Bx-TSkmxsUog",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker+Jenkins+Nginx+Spring Boot 自动化部署项目"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("在线安装：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("# 安装依赖包\nyum -y install yum-utils device-mapper-persistent-data lvm2\n\n# 安装Docker\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \t# 配置安装源 \t\t\t\nyum list docker-ce.x86_64 --showduplicates | sort -r  \t# 查看docker版本，选择对应的安装包\nyum makecache fast && yum -y install docker-ce-18.09.3\t\n\n# 启动并验证Docker是否安装成功\nsystemctl daemon-reload && systemctl start docker\t# 启动docker\nsystemctl enable docker.service\t\t# 设置开机启动\ndocker version           # 查看docker版本信息\n")])])]),t("p",[e._v("RPM参考命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("rpm -qa docker*  # 查找当前系统安装以docker开头的rpm包\nrpm -e docker-ce-17.03.2.ce-1.el7.centos.x86_64 # 卸载这个rpm安装包\nrpm -e --nodeps docker*   # 卸载这个rpm安装包（不卸载依赖的包）\nrpm -ivh docker/* --nodeps --force\t# 安装docker目录下的rpm包\n")])])]),t("p",[e._v("快速卸载Docker中镜像：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker stop $(docker ps -a -q)\t# 先停止镜像生成的容器，会返回容器id\ndocker stop $(docker ps -a | grep gcr | awk '{ print $1}') # # 按名称搜索特定容器进行删除  \ndocker rm $(docker ps -a -q)\t# 再删除镜像生成的容器，会返回容器id\ndocker rm $(docker ps -a | grep gcr | awk '{ print $1}')\ndocker rmi 446380f4e90c\t\t# 再删除镜像 \ndocker rmi -f $(docker images -a -q) # 清理所有镜像(包括中间镜像层)   \ndocker rmi -f $(docker images | grep gcr | awk '{ print $3}') # 按名称搜索特定镜像进行删除\ndocker rmi -f $(docker images | grep none | awk '{ print $3}') # 清理镜像\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Docker常见命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("systemctl start|stop|status|restart|enable|daemon-reload docker  # 启动|停止|查看状态|重启|开机自启|重新载入\ndocker info  # 查看docker概要信息\ndocker stats # 显示统计的docker的CPU、内存、网络、IO情况\ndocker build -t runoob/ubuntu:v1 . \t# 使用Dockerfile编译创建一个镜像 t: tag \ndocker login docker.io\t# 登录hub.docker.com 授权位置文件：  /root/.docker/config.json\n# 推送镜像\ndocker tag mych:0.0.1 dkgee/mych:0.0.1  # 给镜像重新打标签，先标记\ndocker push dkgee/mych:0.0.1 \t\t\t# 再推送\ndocker --help  # 查看docker帮助信息【比较有用】\ndocker -v  \t\t# 查看docker版本\ndocker run -v\t# Docker容器启动的时候，如果要挂载宿主机的一个目录，可以用-v参数指定。\n如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：\ndocker run -it -v /test:/soft centos /bin/bash\ndocker save -o ./ubuntu18.tar ubuntu:18.04 \t# 导出docker镜像ubuntu:18.04到当前目录的ubuntu18.tar中\ndocker load --input ./ubuntu18.tar\t# 从当前路径下ubuntu18.tar加载镜像\ndocker export <容器名> > <保存路径>  # 导出容器，例如docker export ubuntu18 > ./ubuntu18.tar\ndocker import <文件路径>  <容器名>  # 导入容器，docker import ./ubuntu18.tar ubuntu18\ndocker attach <容器名> # 进入容器，该命令通常用于进入后台已经在运行的容器\ndocker exec -it <容器名> <执行指令>  # 进入容器，同一个容器有不同的界面，进入容器后的界面不会受该容器的其他运行者的影响，建议使用该命令\ndocker exec -it ubuntu18 /bin/bash\ndocker exec -it --user root <container id> /bin/bash\t# 切换到root用户登录\ndocker network ls\t# 查看容器网络（容器间通信），默认bridge模式\thttps://www.cnblogs.com/zuxing/articles/8780661.html  \ndocker search wordpress\t# 搜索镜像\ndocker inspect <image name> \t# 检查容器，会将容器的配置详情打印出来  docker inspect data|grep /var/lib/docker/volum\ndocker ps  \t\t# 查看docker容器\ndocker stop $(docker ps -a -q)  # 停止所有容器\ndocker start <image name>  \t\t# 启动容器\ndocker rm $(docker ps -a -q)\t# 删除所有容器\ndocker images \t# 查看docker内镜像\ndocker logs  CONTAINER_ID # 查看容器日志， 参考https://www.cnblogs.com/gylhaut/p/9317843.html\ndocker rmi \t<image id>\t# 通过image的id来指定删除镜像\ndocker run -d xxx\t# 后台运行某个容器  -d:后台模式 -P:创建容器(容器内部端口随机映射到主机端口) -p:指定端口(容器内部端口指定映射到主机端口)\n例如：docker run -d -P training/webapp python app.py\t# 后台运行training目录下的webapp容器，并执行python app.py命令\ndocker run -d -p 5000:5000 training/webapp python app.py  \n# 后台运行training目录下的webapp容器，容器内5000端口映射到主机5000端口，并执行python app.py命令\ndocker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py\n# 我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。【注意，此处可以映射到我们的服务器地址】\n# docker run -d -p 10.3.211.247:19090:19090 training/webapp python app.py   就可以通过访问10.3.211.247:19090来访问容器的 5000 端口。\ndocker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n# 指定端口使用udp协议，默认为tcp协议\ndocker port adoring_stonebraker 5000\n# 查看容器端口绑定情况\ndocker run -d -P --name runoob training/webapp python app.py\n# 当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 --name 标识来命名容器\ndocker ps -l\n# 查看容器名称。\n")])])])]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.runoob.com/docker/docker-command-manual.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("菜鸟教程之Docker命令大全"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/kongxx/article/details/38676917",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker容器之间端口映射"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/u010900754/article/details/78526443",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile中CMD、ENTRYPOINT命令区别"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("通过docker来编译Dockerfile构建镜像: docker build -t app_dir ./Dockerfile")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://bbs.zhengfunyuan.com/read-44-1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker环境探测"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"docker镜像组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像组件"}},[e._v("#")]),e._v(" Docker镜像组件")]),e._v(" "),t("p",[e._v("国内较快的镜像原地址"),t("br"),e._v("\nDocker 官方中国区\thttps://registry.docker-cn.com\t\t\t\n网易\thttp://hub-mirror.c.163.com"),t("br"),e._v("\nustc https://docker.mirrors.ustc.edu.cn")]),e._v(" "),t("p",[e._v("指定镜像源地址进行拉取"),t("br"),e._v("\ndocker pull registry.docker-cn.com/myname/myrepo:mytag")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Redis")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('## 单节点\ndocker pull redis:3.2\n# 无密码模式 以appendonly备份，该备份是采用增量保存写命令方式备份\ndocker run -p 6379:6379 --name myredis -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes\n# 有密码模式 xxxxxxx 为要设置的密码\ndocker run -p 6379:6379 --name myredis -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes --requirepass "xxxxxxx"\ndocker exec -it myredis redis-cli\n## 集群模式【只能用于测试环境，不能用于生产环境】\ndocker pull tommy351/redis-cluster\ndocker run --name myredisc -v $PWD/data:/data -p 7000:7000 -p 7001:7001 -p 7002:7002 -p 7003:7003 -p 7004:7004 -p 7005:7005 -d tommy351/redis-cluster\ndocker exec -it myredis /bin/sh\ndocker exec -it myredisc redis-cli -h 49.233.170.108 -p 7000 -c\n# 解决公网访问出现 redis TTL exhausted.异常信息问题，使用CLUSTER_ANNOUNCE_IP发布。\ndocker run --name myredisc -v $PWD/data:/data -p 7000:7000 -p 7001:7001 -p 7002:7002 -p 7003:7003 -p 7004:7004 -p 7005:7005 \\\n-e CLUSTER_ANNOUNCE_IP=127.0.0.1 -d tommy351/redis-cluster\t\n')])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Mysql")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker pull mysql:5.6\ndocker pull kiratalent/mysql:5.7\ndocker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/var/log/mysql -v $PWD/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6\ndocker exec -it mymysql mysql -uroot -p123456\n\n# docker 修改mysqld配置重启失败后，排查需要修改目录权限，使用下面方式重启。\n# 这种在后面以exec交互命令进入容器，执行目录赋权命令即可。或者使用在主机使用"chown -R polkitd:ssh_keys logs"\ndocker start mymysql && docker exec -it mymysql chown -R mysql:mysql /var/log/mysql/\n\n# mysql开启binlog，修改mysql配置，如/etc/mysql/my.cnf，增加binlog配置。\t\nlog-bin = /var/log/mysql/mysql-bin.log\nexpire-logs-days = 14\nmax-binlog-size = 500M\nserver-id = 1\n')])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Zookeeper")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker pull zookeeper\ndocker run --name myzk -p 2181:2181 -d zookeeper\ndocker run --name myzk -p 2181:2181 --network host -d zookeeper 【使用主机网络】\ndocker exec -it myzk /bin/bash\n\n# 重要提示，使用的zookeeper，必须是 zookeeper:tag系列，不是能jplock/zookeeper，这个镜像集群有问题！！！！\n")])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Kafka")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/once/p/10146666.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("集群模式搭建参考"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker pull wurstmeister/kafka\t\t\t\ndocker run -d --name mykafka --publish 9092:9092 --link myzk --env KAFKA_ZOOKEEPER_CONNECT=myzk:2181 --env KAFKA_ADVERTISED_HOST_NAME=localhost --env \\\nKAFKA_ADVERTISED_PORT=9092 --volume /etc/localtime:/etc/localtime wurstmeister/kafka:latest\n\ndocker exec -it kafka /bin/bash\nbin/kafka-topics.sh --create --zookeeper myzk:2181 --replication-factor 1 --partitions 1 --topic mykafka3\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka3\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mykafka3 --from-beginning 【注意kakfa低版本问题】\n\nbin/kafka-topics.sh --create --zookeeper myzk:2181 --replication-factor 1 --partitions 1 --topic TopicDeviceLog\nbin/kafka-topics.sh --create --zookeeper myzk:2181 --replication-factor 1 --partitions 1 --topic TopicIpAccessLog\n\ndocker exec -it mykafka /opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper myzk:2181 --replication-factor 1 --partitions 1 --topic TopicDeviceLog\ndocker exec -it mykafka /opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper myzk:2181 --replication-factor 1 --partitions 1 --topic TopicIpAccessLog\n\ndocker exec -it ciot_mykafka_1 /opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper 172.30.154.245:2181 --replication-factor 1 --partitions 1 --topic TopicDeviceLog\n\n#启动Docker中kafka生产者和消费端（注意kafka中版本号，可能会因为镜像更新而变化）\ndocker exec -it mykafka /opt/kafka_2.12-2.4.0/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic TopicMessageLog\ndocker exec -it mykafka /opt/kafka_2.12-2.4.0/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic TopicMessageLog --from-beginning \n\n#使用云服务器部署Kafka节点，KAFKA_ADVERTISED_HOST_NAME为内网IP、KAFKA_ADVERTISED_LISTENERS为外网IP\ndocker run -d --name mykafka --publish 9092:9092 --link myzk --env KAFKA_ZOOKEEPER_CONNECT=myzk:2181 --env KAFKA_ADVERTISED_HOST_NAME=172.17.0.10 --env \\\nKAFKA_ADVERTISED_PORT=9092 --env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://122.51.101.124:9092 --volume /etc/localtime:/etc/localtime wurstmeister/kafka:latest\n\n# kafka-manager有图形化UI，可以方便的监控集群状态 项目地址：https://github.com/yahoo/CMAK\ndocker run -itd --restart=always --name=kafka-manager -p 9000:9000 -e ZK_HOSTS="zoo1:2181,zoo2:2181,zoo3:2181" sheepkiller/kafka-manager\n\n# kafka队列开始读取消息，每次重启后，都会从开始处读取消息，可能会导致重复消息数据\n# auto.offset.reset --earliest: 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费 \n# auto.offset.reset --latest : 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据 \n\n# 重要提示，使用的zookeeper，必须是 zookeeper:tag系列，不是能jplock/zookeeper，这个镜像集群有问题！！！！\n')])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Clickhouse&Tabix")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker pull yandex/clickhouse-server\ndocker pull yandex/clickhouse-client\n\n## 只挂载存储\ndocker run -d --name mych --ulimit nofile=262144:262144 -p 8123:8123 --volume=$PWD/database:/var/lib/clickhouse yandex/clickhouse-server\n\n## 挂载配置和存储\ndocker run -d --name mych --ulimit nofile=262144:262144 -v $PWD/database:/var/lib/clickhouse \\\n-v $PWD/config/config.xml:/etc/clickhouse-server/config.xml yandex/clickhouse-server\n\n## 客户端\ndocker run -it --rm --link mych:clickhouse-server yandex/clickhouse-client --host clickhouse-server \ndocker run -it --rm yandex/clickhouse-client --host 10.92.8.210\n\n## Tabix(clickhouse 查询操作界面)\ndocker pull spoonest/clickhouse-tabix-web-client\ndocker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client\n")])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("ELK")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('## Elasticsearch\ndocker pull elasticsearch:6.7.0\ndocker run --name elasticsearch -d -p 9200:9200 -p 9300:9300 elasticsearch:6.7.0\n\ndocker run -d -p 9202:9200 -p 9302:9300 --link es1\\\n--name es2 -e cluster.name=meitu -e ES_JAVA_OPTS="-Xms512m -Xmx512m" -e xpack.security.enabled=false\\\n-e discovery.zen.ping.unicast.hosts=es1 docker.elastic.co/elasticsearch/elasticsearch:5.6.3\n\ndocker run --rm -v /opt/elk/es/data:/usr/share/elasticsearch/data elasticsearch:6.7.0 /bin/bash -c \'ls -al /usr/share/elasticsearch/\'\n\n集群搭建参考地址: https://blog.csdn.net/belonghuang157405/article/details/83301937\n1. 本地映射data目录权限需要修改\t\n\tchmod 775  /opt/elk/es/data && echo "vm.max_map_count=655360" >> /etc/sysctl.conf && /sbin/sysctl -p\t\t\n2. 启动docker-compose参考\nversion: \'2\'\n\tservices:\n\t\tes:\n\t\timage: elasticsearch:6.7.0\n\t\tports:\n\t\t\t- "9200:9200"\n\t\t\t- "9300:9300"\n\t\tenvironment:\n\t\t\t- xpack.security.enabled=false\n\t\tvolumes:\n\t\t\t- /opt/elk/es/es.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n\t\t\t- /opt/elk/es/data:/usr/share/elasticsearch/data\n\t\t\t- /opt/elk/es/plugins:/usr/share/elasticsearch/plugins\n\t\tnetwork_mode: "bridge"\n3. 注意报错： Caused by: java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes\n\tchmod 775 /opt/elk/es/data\n\n## Logstash\ndocker pull logstash:6.5.2\t\t\t\ndocker run -d -p 9600:9600 -it -v $PWD/config/:/usr/share/logstash/config/  logstash:6.5.2\t\t\n【装插件】\ndocker run -it --rm logstash:6.5.2  logstash-plugin install  logstash-input-jdbc  \ndocker run -it --rm mylogstash:1.0.0  logstash-plugin install  logstash-input-nsq\n【本地目录安装】\ndocker run -it --rm -v $PWD/plugin/:/opt/plugin/ logstash:6.5.2 logstash-plugin install file:///opt/plugin/logstash-filter-prune-6.5.2.zip\ndocker run -it --rm logstash:5.6.10 -f /dir/config.conf -v /config/dir:/dir\t\n如果需要安装多个插件需要使用Dockerfile重新创建镜像，例如\nFROM logstash:6.5.2\nADD plugin /opt/plugin\nRUN logstash-plugin install file:///opt/plugin/logstash-filter-mutate-6.5.2.zip\nRUN logstash-plugin install file:///opt/plugin/logstash-filter-prune-6.5.2.zip\nRUN logstash-plugin install file:///opt/plugin/logstash-input-kafka-6.5.2.zip\nRUN logstash-plugin install file:///opt/plugin/logstash-output-clickhouse-6.5.2.zip\n\n## Kibana【界面】\ndocker pull kibana:6.7.0\ndocker run -d --name kibana -e ELASTICSEARCH_HOSTS=http://172.30.154.241:9200,http://172.30.154.244:9200,http://172.30.154.245:9200 -p 5601:5601 kibana:6.7.0\ndocker run -d --name kibana -e ELASTICSEARCH_HOSTS=http://172.30.154.241:9200 -p 5601:5601 kibana:6.7.0\n\n## elasticsearch-head【界面】\ndocker pull leeyaf/elasticsearch-head:v1.0\ndocker run --name elasticsearch-head -d -p 9100:9100 leeyaf/elasticsearch-head:v1.0\ndocker exec -it elasticsearch-head /bin/bash\n')])])])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Jenkins（建议使用rpm安装在物理机上，不要使用Docker镜像）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker pull jenkins/jenkins:lts  #使用这个版本\ndocker run --name myjk -p 8080:8080 -p 50000:50000 -d jenkins/jenkins:lts\n\njenkins镜像需要自己制作\t50000为agent代理控制端口\tjdk环境配置\tmaven环境配置\ndocker run -d -p 8080:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home -v /usr/local/maven3:/usr/local/maven3 \\ \n-v /usr/java/jdk1.8.0_201:/usr/java/jdk1.8.0_201 -v /usr/bin/mvn/:/usr/bin/mvn/ --name=jenkinsnew6 jenkinsnew\n# 需要把自带的jdk、maven安装路径映射进docker容器中\n在jenkins shell中执行没有加载/etc/profile .bash_profile中的环境变量\t\n")])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Nexus3")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker pull sonatype/nexus3\n")])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Nginx")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("# 参考: https://blog.csdn.net/sunt2018/article/details/85001485\ndocker pull nginx\n# 创建挂载目录\nmkdir -p /data/nginx/{conf,conf.d,html,logs}\t\n# 在 conf 中 编写 nginx.conf 配置文件\t\ndocker run --name mynginx -p 80:80  \\\n-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  \\\n-v /data/nginx/logs:/var/log/nginx  \\\n-v /data/nginx/html:/usr/share/nginx/html \\\n-d nginx:latest\n")])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("制作镜像并传播示例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('## 提交自制镜像\ndocker commit -a "dkgee" -m "ciot" 7ec361637ebb mych:1.0.0\n## 导出镜像到本地\ndocker save mych:0.0.1 -o /opt/docker/clickhouse/mych.tar\ntar -zcvf clickhouse.tar.gz clickhouse\n# 将clickhouse.tar.gz复制到其他机器\ntar -zxvf clickhouse.tar.gz\n## 导入镜像\ndocker load --input ./mych.tar\ndocker run -d --name mych --ulimit nofile=262144:262144 -p 8123:8123 --volume=$PWD/database:/var/lib/clickhouse mych:0.0.1\ndocker load --input ./mych-client.tar\ndocker run -it --rm --link mych:clickhouse-server yandex/clickhouse-client --host clickhouse-server \n')])])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("ActiveMQ")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("# 拉取ActiveMQ\ndocker pull rmohr/activemq:latest\n# 8161为UI端口，admin/admin\ndocker run -p 61616:61616 -p 8161:8161 rmohr/activemq\n")])])])]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/vRQc4XvsgFA17r6QVe2okA",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker搭建RocketMQ"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"app部署到docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#app部署到docker"}},[e._v("#")]),e._v(" App部署到Docker")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/anxpp/article/details/73478883",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring boot应用发布到docker(完整版)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/bljbljbljbljblj/article/details/83791961",target:"_blank",rel:"noopener noreferrer"}},[e._v("springboot2.x+docker部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/alinyua/article/details/81094240",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maven中最强大的Docker插件"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("MVN编译路径：mvn clean install -DskipTests docker:build")])]),e._v(" "),t("p",[e._v("配置 Docker远程访问API:")]),e._v(" "),t("blockquote",[t("p",[e._v("docker-maven-plugin 插件是使用的 Docker Remote API 进行远程提交镜像的，docker 默认并没有开启该选项，直接修改 docker 服务配置即可，\nCentos 7 配置文件位于:/usr/lib/systemd/system/docker.service\n直接在 ExecStart 启动参数的 /usr/bin/dockerd 后面添加以开启 TCP 连接：-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\nDocker 会根据 Dockerfile 生成镜像时自动下载需要的依赖\nIDEA有Docker插件可用")])]),e._v(" "),t("p",[e._v("镜像加速")]),e._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /etc/docker\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/docker/daemon.json "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<-")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'EOF\'\n{\n  "registry-mirrors": ["https://adabmonl.mirror.aliyuncs.com"]\n}\nEOF')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl daemon-reload\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl restart "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h3",{attrs:{id:"volumes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volumes"}},[e._v("#")]),e._v(" Volumes")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.jb51.net/article/156704.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker数据存储之Volumes详解"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jb51.net/article/156711.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Volumes使用场景"),t("OutboundLink")],1)])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Volumes特点")]),e._v(" "),t("ol",[t("li",[e._v("数据卷可以在容器间共享和重用")]),e._v(" "),t("li",[e._v("对数据卷的写入操作，不会对镜像有任何影响")]),e._v(" "),t("li",[e._v("数据卷默认会一直存在，即使容器被删除。使用数据卷的目的是持久化容器中的数据，以在容器间共享或者防止数据丢失（写入容器存储层的数据会丢失）")])]),e._v(" "),t("p",[e._v("使用数据卷的步骤一般分为两步：")]),e._v(" "),t("ol",[t("li",[e._v("创建一个数据卷")]),e._v(" "),t("li",[e._v("使用-v或--mount参数将数据卷挂载容器指定目录中，这样所有该容器针对该指定目录的写操作都会保存在宿主机上的Volume中")])])]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 查看数据卷")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" volume "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 统计数据卷大小")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("du")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-sh")]),e._v(" /var/lib/docker/volumes/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 检查某个（my-vol）数据卷")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" volume inspect my-vol\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除一个Volume")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" volume "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" my-vol\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除所有未使用的Volumes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" volume prune\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("p",[e._v("使用只读数据卷：")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 示例一")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nginxtest "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--mount")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("source")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nginx-vol,destination"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/share/nginx/html,readonly "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 此处为只读")]),e._v("\n nginx:latest\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 示例二")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nginxtest "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" nginx-vol:/usr/share/nginx/html:ro "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只读")]),e._v("\n nginx:latest\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Volumes使用场景")]),e._v(" "),t("ol",[t("li",[e._v("在多个容器间共享数据。")]),e._v(" "),t("li",[e._v("无法确保Docker主机一定拥有某个指定的文件夹或目录结构，使用Volumes可以屏蔽这些宿主机差异。")]),e._v(" "),t("li",[e._v("当你希望将数据存储在远程主机或云提供商上。")]),e._v(" "),t("li",[e._v("当你希望备份，恢复或者迁移数据从一台Docker主机到另一台Docker主机，Volumes是更好的选择。")])])]),e._v(" "),t("h3",{attrs:{id:"小知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小知识点"}},[e._v("#")]),e._v(" 小知识点")]),e._v(" "),t("ol",[t("li",[e._v("“Java 将服务器类机器定义为具有2个 CPU 和 2GB 内存，默认堆大小为物理内存的1/4。”，这句话反映出：如果服务器硬件（包括虚拟OS）资源比较丰富，可以使用容器的方式对服务器资源进行均衡分配（例如限制cpu个数、内存大小），从而实现多台“服务器”效果。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://yq.aliyun.com/articles/684297",target:"_blank",rel:"noopener noreferrer"}},[e._v("容器中 Java 应用程序的内存和 CPU 如何分配？"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/CloudMan6/p/7003199.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("限制容器对CPU的使用 - 每天5分钟玩转 Docker 容器技术（28）"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("一个docker host上会运行若干容器，每个容器都需要CPU、内存和IO资源。对 KVM，VMware等虚拟化技术，用户可以控制分配多少CPU、内存资源给每个虚拟机。对于容器，Docker也提供了类似的机制避免某个容器因占用太多资源而影响其他容器乃至整个host的性能。")]),e._v(" "),t("li",[e._v("Docker 安装时会创建一个 命名为 docker0 的 linux bridge。如果不指定--network，创建的容器默认都会挂到 docker0 上。")]),e._v(" "),t("li",[e._v("Docker 提供三种 user-defined 网络驱动：bridge, overlay 和 macvlan。overlay 和 macvlan 用于创建跨主机的网络。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);